/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import core.ManipularImagem;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import models.UsuarioVO;
import services.ServicesFactory;
import services.UsuarioServices;

/**
 *
 * @author Luan Junior
 */
public class GUIAdcImagem extends javax.swing.JInternalFrame {
    private UsuarioVO usuario = new UsuarioVO();
    BufferedImage imagem;
    String localFoto;
    /**
     * Creates new form GUIAdcImagem
     */
    public GUIAdcImagem(UsuarioVO u) throws SQLException {
        initComponents();
        this.usuario = u;
        mostrarImagem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbEnviar = new javax.swing.JButton();
        jlImagemFoto = new javax.swing.JLabel();
        jlTextImagem = new javax.swing.JLabel();
        jbImagem = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Adicionar Foto");

        jbEnviar.setText("Enviar");
        jbEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnviarActionPerformed(evt);
            }
        });

        jlTextImagem.setText("Imagem");

        jbImagem.setText("Selecionar Imagem");
        jbImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImagemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jlTextImagem)
                        .addGap(27, 27, 27)
                        .addComponent(jbImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jlImagemFoto))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jbEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTextImagem)
                    .addComponent(jbImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jlImagemFoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 433, Short.MAX_VALUE)
                .addComponent(jbEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarImagem() throws SQLException{
        UsuarioServices us = ServicesFactory.getUsuarioServices();
        UsuarioVO userFoto = us.buscarUsuarioPorEmail(usuario.getEmail());
        ManipularImagem.exibiImagemLabel(userFoto.getFoto(), jlImagemFoto);
    }
    
    private void enviarImagem() throws SQLException{
        try {
            
            //convertendo imagem em bytes para guardar no banco de dados
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            BufferedImage bi = ImageIO.read(new File(localFoto));
            ImageIO.write((BufferedImage)bi, "jpg", baos);
            baos.flush();
            byte[] bytes = baos.toByteArray();
            baos.close();
            
            usuario.setFoto(bytes);
            UsuarioServices us = ServicesFactory.getUsuarioServices();
            us.adicionarFoto(usuario);
            
            JOptionPane.showMessageDialog(rootPane, "Imagem Salva com sucesso!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(),"ERRO",JOptionPane.ERROR_MESSAGE);
        }
    }//fecha método
    
    private void selecionarImagem(){
         
        //instanciando um objeto da classe FileChooser 
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Importar foto");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            
            File arquivo = fc.getSelectedFile(); // pega o arquivo selecionado
            
            BufferedImage imagem = null;
            
            try{
                
                /* Para que isso funcione é necessário importar manualmente
                a classe ImageIO import abaixo: 
                javax.imageio.ImageIO */
                imagem = ImageIO.read(arquivo);
                
            }catch(IOException ioe){
                
                JOptionPane.showMessageDialog(rootPane, "Erro ao redimensionar imagem! " + ioe.getMessage());
                
            }//fecha try-catch
            
            BufferedImage imgAux = new BufferedImage(140,135, imagem.getType());
            
            Graphics2D g = imgAux.createGraphics();
            
            AffineTransform at = AffineTransform.getScaleInstance((double) 140 / imagem.getWidth(), (double) 135 / imagem.getHeight());
            
            g.drawRenderedImage(imgAux, at);
            
            jlImagemFoto.setIcon(new ImageIcon(imagem));
            
            localFoto = fc.getSelectedFile().getPath();
            
        }//fecha if
    }
    
    private void jbEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEnviarActionPerformed
        try {
            enviarImagem();
        } catch (SQLException ex) {
        }
    }//GEN-LAST:event_jbEnviarActionPerformed

    private void jbImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImagemActionPerformed
        selecionarImagem();
    }//GEN-LAST:event_jbImagemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbEnviar;
    private javax.swing.JButton jbImagem;
    private javax.swing.JLabel jlImagemFoto;
    private javax.swing.JLabel jlTextImagem;
    // End of variables declaration//GEN-END:variables
}
